name: 'Snap Publish'
description: 'Publish a Snap integration to AWS S3'

inputs:
  repository:
    description: 'Repository of Snap implementation to publish'
    required: true
  secretKey:
    description: 'Searchspring account secretKey. Can be obtained in the Searchspring Management Console. Required if package.json siteId is string format'
    required: false
  skipTests:
    description: 'Skip running e2e tests'
    required: false
    default: false
  skipLighthouse:
    description: 'Skip running lighthouse tests'
    required: false
    default: false
  skipPublish:
    description: 'Skip publishing to cdn'
    required: false
    default: false
  NODE_AUTH_TOKEN:
    description: 'Node auth token'
    required: false
  aws-access-key-id:
    description: 'AWS access Key'
    required: false
  aws-secret-access-key:
    description: 'AWS secret Key'
    required: false
  aws-cloudfront-distribution-id:
    description: 'AWS cloudfront distribution id'
    required: false
  aws-s3-bucket-name:
    description: 'AWS S3 bucket name'
    required: false
  aws-region:
    description: 'AWS region'
    required: false
    default: us-east-2  
  LHCI_GITHUB_APP_TOKEN:
    description: 'Lighthouse App Key for PR status updates'
    required: false
  GITHUB_BOT_TOKEN:
    description: 'Github user PAT token for posting lighthouse results in pull request comments'
    required: false
  secrets:
    description: 'Secrets encoded via toJSON. Expected if project has multiple siteIds in package.json. Expects repository secret for each key (ie. `WEBSITE_SECRET_KEY_${siteId}`)'
    required: false
  skipInvalidation:
    description: 'Skip Cloudfront invalidation'
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      id: checkout-repo
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.repository }}
        path: repository
        fetch-depth: 0

    - name: Setup Node
      id: setup-node
      uses: actions/setup-node@v2
      with:
        node-version: 16
        registry-url: 'https://npm.pkg.github.com'
        scope: '@searchspring'

    - name: Extract Variables
      id: variables
      shell: bash
      working-directory: repository
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then \
          branch=`echo "${{ github.head_ref }}"`;
        else
          branch=`echo ${GITHUB_REF#refs/heads/}`;
        fi;
        echo "branch is: $branch";
        echo "branch=$branch" >> $env:GITHUB_OUTPUT;
        echo "Using branch: $branch";

        secrets=`echo '${{ inputs.secrets }}' | jq -c .`;
        echo "secrets=$secrets" >> $env:GITHUB_OUTPUT;
        echo "Using secrets: $secrets";

        siteId_Type=`jq -r '.searchspring.siteId | type' < package.json`;
        echo "siteId_Type=$siteId_Type" >> $env:GITHUB_OUTPUT;

        packageJSONVersion=`jq -r '.version' < package.json`;
        echo "packageJSONVersion=$packageJSONVersion" >> $env:GITHUB_OUTPUT;

        if [ $siteId_Type = 'string' ]; then \
          echo "siteId is a string"; \
          siteId=`jq -r '.searchspring.siteId' < package.json`; \
          echo "siteId=$siteId" >> $env:GITHUB_OUTPUT; \
          echo "Using siteId: $siteId"; \
        elif [ $siteId_Type = 'object' ]; then \
          echo "siteId is an object"; \
          siteIds=`jq -r '.searchspring.siteId | keys_unsorted | join(",")' < package.json`; \
          echo "siteIds=$siteIds" >> $env:GITHUB_OUTPUT; \
          echo "Using siteIds: $siteIds"; \

          siteNames=`jq -r '[.searchspring.siteId[].name] | join(",")' < package.json`; \
          echo "siteNames=$siteNames" >> $env:GITHUB_OUTPUT; \
          echo "Using siteNames: $siteNames"; \
        else \
          echo "Cannot determine project siteId from package.json"; \
          exit 1; \
        fi;

        pullRequestID=${{ github.event.pull_request.number }}
        echo "pullRequestID=$pullRequestID" >> $env:GITHUB_OUTPUT;
        echo "Using pullRequestID: $pullRequestID"
        repository=`git config --get remote.origin.url | grep -Eo "[^\/]+$" | sed 's/.git//g'`
        echo "repository=$repository" >> $env:GITHUB_OUTPUT;
        echo "Using repository: $repository"
        startTime=`date -u +%s`
        echo "startTime=$startTime" >> $env:GITHUB_OUTPUT;
        echo "Using startTime: $startTime"

        skipAWS='${{ inputs.aws-access-key-id && inputs.aws-secret-access-key && inputs.aws-cloudfront-distribution-id && inputs.aws-s3-bucket-name }}'
        echo "skipAWS=$skipAWS" >> $env:GITHUB_OUTPUT;
        echo "Using skipAWS: $skipAWS"

        echo "runnerName=$RUNNER_NAME" >> $env:GITHUB_OUTPUT;
        echo "Using runnerName: $RUNNER_NAME"

    - name: Configure AWS credentials
      id: configure-aws
      if: ${{ env.skipAWS }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Updater Start Metrics
      id: start-metrics
      if: ${{ env.runnerName != 'Hosted Agent' }}
      shell: bash
      run: |
        # Start time metric used in snapp-updater action status, Should only run on self-hosted
        node scripts/metrics/updater.js \
          --runAttempt "${{ github.run_attempt }}" \
          --actor "${{ github.actor }}" \
          --repository "${{ env.repository }}" \
          --branch "${{ env.branch }}" \
          --eventName "${{ github.event_name }}" \
          --pullRequestID "${{ github.event.pull_request.number }}" \
          --startTime "${{ env.startTime }}" \
          --conclusion "" \
          --duration "" \
          --failedStep "" \
          --commitMessage "${{ github.event.head_commit.message }}" \
          --url "https://github.com/${{ github.repository_owner }}/${{ env.repository }}/actions/runs/${{ github.run_id }}" \
          --secrets-ci '${{ env.secrets }}';

    - name: Cache node_modules
      id: cache
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Authenticate siteId and secretKey
      id: authenticate
      shell: bash
      run: |
        node scripts/smc/verify.js \
          --siteId_Type "${{ env.siteId_Type }}" \
          --siteId "${{ env.siteId }}" \
          --repository "${{ env.repository }}" \
          --secretKey "${{ inputs.secretKey }}" \
          --siteIds "${{ env.siteIds }}" \
          --siteNames "${{ env.siteNames }}" \
          --secrets-ci '${{ env.secrets }}';

    - name: Install Packages
      id: install
      shell: bash
      working-directory: repository
      env:
        NODE_AUTH_TOKEN: ${{ inputs.NODE_AUTH_TOKEN }}
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi

    - name: Build Bundle
      id: build
      shell: bash
      working-directory: repository
      run: |
        npm run build
        if [ ! -f "dist/bundle.js" ]; then \
          echo "Expected dist directory to contain bundle.js and universal.bundle.js"; \
          echo "Missing dist/bundle.js"; \
          exit 1; \
        elif [ ! -f "dist/universal.bundle.js" ]; then \
          echo "Expected dist directory to contain bundle.js and universal.bundle.js"; \
          echo "Missing dist/universal.bundle.js"; \
          exit 1; \
        fi;

    - name: Run Tests
      id: test
      shell: bash
      working-directory: repository
      run: |
        if [ "${{ env.pullRequestID }}" = "" ]; then \
          if [ ${{ inputs.skipTests }} = true ]; then \
            echo 'skipping tests due to skipTests flag'; 
          elif [ ${{ env.branch }} = production ]; then \
            echo "skipping tests for push triggers to production"; \
          else \
            npm run test; \
          fi; \
        else \
          echo 'skipping tests for pull_request triggers'; \
        fi;
    
    - name: Snapfu Recs Sync
      id: snapfu-recs-sync
      shell: bash
      working-directory: repository
      run: |
        if [ ${{ env.branch }} = production ]; then \
          npm install -g snapfu
          snapfu recs sync \
            --secret-key "${{ inputs.secretKey }}" \
            --secrets-ci '${{ env.secrets }}';
        else \
          echo 'skipping snapfu recs sync for ${{ env.branch }} branch'; \
        fi; \
    
    - name: Lighthouse Tests
      id: lighthouse
      shell: bash
      working-directory: repository
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ inputs.LHCI_GITHUB_APP_TOKEN }}
      run: |
        if [ ${{ inputs.skipLighthouse }} = true ]; then \
          echo 'skipping lighthouse tests'; \
        elif [ "${{ env.pullRequestID }}" = "" ]; then \
          echo 'no pull request ID found'; \
        elif [ -f "tests/lighthouse/lighthouserc.js" ]; then \
          npm run lighthouse -- --throttling.cpuSlowdownMultiplier=2.2 && \
          echo "scores=$(cat tests/lighthouse/runs/manifest.json | jq -c '.[] | select( .isRepresentativeRun | select('true') ) | .summary' | jq -r 'to_entries[] | "\(.key): \(.value | tonumber * 100 | floor )"' | tr '\n' ',' )" >> $env:GITHUB_OUTPUT; \
          echo "report=$(cat tests/lighthouse/runs/manifest.json | jq -c '.[] | select( .isRepresentativeRun | select('true') ) | .htmlPath')" >> $env:GITHUB_OUTPUT || exit 1; \
        else \
          echo 'lighthouserc.js file not found in repository, skipping lighthouse tests'; \
        fi
    
    - name: Git Tag
      id: tag
      shell: bash
      working-directory: repository
      run: |
        if [ ${{ env.branch }} = production ]; then
          git config user.name searchspring-machine
          git config user.email machine@searchspring.com

          if [ $(git tag -l "${{ env.packageJSONVersion }}") ]; then
              # tag exist, use scripts/tag/increment.js to bump/add suffix version
              echo "Tag ${{ env.packageJSONVersion }} already exists."
              newTag=$(node ./../scripts/tag/increment.js --tags "$(git tag -l '${{ env.packageJSONVersion }}*')")
              if [ "${{ env.packageJSONVersion }}" != "$newTag" ]; then
                echo "Creating tag $newTag"
                git tag -a "$newTag" -m "tagged from snap-action"
                git push origin $newTag
                tag=`echo "$newTag"`;
                echo "tag=$tag" >> $env:GITHUB_OUTPUT;
              fi
          else
              # tag doesn't exist, create it from the package.json version
              git tag -a "${{ env.packageJSONVersion }}" -m "tagged from snap-action"
              git push origin ${{ env.packageJSONVersion }}
              tag=`echo "${{ env.packageJSONVersion }}"`;
              echo "tag=$tag" >> $env:GITHUB_OUTPUT;
          fi
        fi

    - name: PR Comment
      id: pr-comment
      uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.GITHUB_BOT_TOKEN || github.token }}
        script: |
          ("${{ steps.lighthouse.outputs.scores }}" != '') && ("${{ inputs.LHCI_GITHUB_APP_TOKEN }}" == '') && github.rest.issues.createComment({
            issue_number: ${{ env.pullRequestID || 0 }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "Lighthouse <a target='_blank' rel='noopener' href='https://snapui.searchspring.io/${{ env.siteId }}/.lighthouse/${{ env.branch }}/" + ${{ steps.lighthouse.outputs.report || '""' }}.split('/').pop() + "'>Results</a>\n\n${{ steps.lighthouse.outputs.scores }}".split(',').join('\n')
          })
          
    - name: Lighthouse Metrics
      id: lighthouse-metrics
      if: ${{ env.skipAWS }}
      shell: bash
      run: |
        if [ ${{ inputs.skipLighthouse }} = false ]; then \
          if [ "${{ github.event_name }}" = "pull_request" ]; then \
            node scripts/metrics/lighthouse.js \
              --siteId "${{ env.siteId }}" \
              --branch "${{ env.branch }}" \
              --repositoryOwner "${{ github.repository_owner }}" \
              --repository "${{ env.repository }}" \
              --issueNumber "${{ env.pullRequestID }}";
          else \
            echo "Skipping lighthouse metrics generation due to non pull_request event"; \
          fi;
        else \
          echo "skipping lighthouse metrics generation due to skipLighthouse flag"; \
        fi;
        if [ -f metrics/SnapAction*.json ]; then \
          aws s3 cp --region us-east-1 ./metrics/SnapAction*.json s3://datawarehouse-stage/team-metrics-import/; \
        fi;
        
    - name: Copy Files to S3
      id: s3-upload
      if: ${{ env.skipAWS }}
      shell: bash
      working-directory: repository
      run: |
        if [ ${{ inputs.skipPublish }} = true ]; then
          echo "skipping upload of 'dist' and 'public' directories to S3 due to skipPublish flag";
        elif [ "${{ github.event_name }}" = "pull_request" ]; then \
          echo "skipping upload of 'dist' and 'public' directories to S3 for pull_request action triggers"; \
        else \
          if [ '${{ env.siteId_Type }}' = 'string' ]; then \
            aws s3 sync --cache-control max-age=1800 --acl public-read dist s3://${{ inputs.aws-s3-bucket-name }}/${{ env.siteId }}/${{ env.branch }}
            aws s3 sync --cache-control max-age=1800 --acl public-read public s3://${{ inputs.aws-s3-bucket-name }}/${{ env.siteId }}/${{ env.branch }}
            if [ "${{ steps.tag.outputs.tag }}" != "" ]; then
              aws s3 sync --cache-control max-age=1800 --acl public-read dist s3://${{ inputs.aws-s3-bucket-name }}/${{ env.siteId }}/${{ steps.tag.outputs.tag }}
              aws s3 sync --cache-control max-age=1800 --acl public-read public s3://${{ inputs.aws-s3-bucket-name }}/${{ env.siteId }}/${{ steps.tag.outputs.tag }}
            fi
          elif [ '${{ env.siteId_Type }}' = 'object' ]; then
            echo "${{ env.siteIds }}" | tr , '\n' | while read siteId
              do
                echo "Copying files to S3 for siteId $siteId"
                aws s3 sync --cache-control max-age=1800 --acl public-read dist s3://${{ inputs.aws-s3-bucket-name }}/$siteId/${{ env.branch }}
                aws s3 sync --cache-control max-age=1800 --acl public-read public s3://${{ inputs.aws-s3-bucket-name }}/$siteId/${{ env.branch }}
                if [ "${{ steps.tag.outputs.tag }}" != "" ]; then
                  aws s3 sync --cache-control max-age=1800 --acl public-read dist s3://${{ inputs.aws-s3-bucket-name }}/$siteId/${{ steps.tag.outputs.tag }}
                  aws s3 sync --cache-control max-age=1800 --acl public-read public s3://${{ inputs.aws-s3-bucket-name }}/$siteId/${{ steps.tag.outputs.tag }}
                fi
              done;
          fi;

          if [ -f tests/lighthouse/runs/manifest.json ]; then aws s3 sync --cache-control max-age=1800 --acl public-read tests/lighthouse/runs s3://${{ inputs.aws-s3-bucket-name }}/${{ env.siteId }}/.lighthouse/${{ env.branch }}; fi;
        fi;

    - name: Invalidate Files
      id: invalidation
      if: ${{ env.skipAWS }}
      shell: bash
      working-directory: repository
      env:
        AWS_MAX_ATTEMPTS: 9
      run: |
        if [ ${{ inputs.skipInvalidation }} = true ]; then
          echo "skipping invalidation due to skipInvalidation flag";
        elif [ ${{ inputs.skipPublish }} = true ]; then
          echo "skipping invalidation due to skipPublish flag";
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "skipping invalidation for pull_request action triggers";
        else
          if [ ${{ env.branch }} = production ]; then
            if [ '${{ env.siteId_Type }}' = 'string' ]; then
              aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/${{ env.siteId }}/*"
            elif [ '${{ env.siteId_Type }}' = 'object' ]; then
              echo "${{ env.siteIds }}" | tr , '\n' | while read siteId
                do
                  echo "Invalidating files for siteId $siteId"
                  aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/$siteId/*"
                done
            fi
          else
            if [ '${{ env.siteId_Type }}' = 'string' ]; then
              aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/${{ env.siteId }}/${{ env.branch }}/*"
            elif [ '${{ env.siteId_Type }}' = 'object' ]; then
              echo "${{ env.siteIds }}" | tr , '\n' | while read siteId
                do
                  echo "Invalidating files for siteId $siteId on branch ${{ env.branch }}"
                  aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/$siteId/${{ env.branch }}/*"
                done
            fi
          fi
        fi;
    
    - run: |
        start=${{ env.startTime }};
        duration=$(expr $(date -u +%s) - $start );

        # Conclusion metric used in snapp-updater action status, Should only run on self-hosted
        if [ '${{ env.runnerName }}' != 'Hosted Agent' ]; then
          node scripts/metrics/updater.js \
            --runAttempt "${{ github.run_attempt }}" \
            --actor "${{ github.actor }}" \
            --repository "${{ env.repository }}" \
            --branch "${{ env.branch }}" \
            --eventName "${{ github.event_name }}" \
            --pullRequestID "${{ github.event.pull_request.number }}" \
            --startTime "" \
            --conclusion "${{ github.action_status }}" \
            --duration "$duration" \
            --failedStep "${{ steps.checkout-repo.conclusion == 'Failure' && 'checkout-repo' || steps.configure-aws.conclusion == 'Failure' && 'configure-aws' || steps.variables.conclusion == 'Failure' && 'variables' || steps.authenticate.conclusion == 'Failure' && 'authenticate' || steps.setup-node.conclusion == 'Failure' && 'setup-node' || steps.cache.conclusion == 'Failure' && 'cache' || steps.install.conclusion == 'Failure' && 'install' || steps.build.conclusion == 'Failure' && 'build' || steps.test.conclusion == 'Failure' && 'test' || steps.snapfu-recs-sync.conclusion == 'Failure' && 'snapfu-recs-sync' || steps.lighthouse.conclusion == 'Failure' && 'lighthouse' || steps.tag.conclusion == 'Failure' && 'tag' || steps.pr-comment.conclusion == 'Failure' && 'pr-comment' || steps.s3-upload.conclusion == 'Failure' && 's3-upload' || steps.lighthouse-metrics.conclusion == 'Failure' && 'lighthouse-metrics' || steps.invalidation.conclusion == 'Failure' && 'invalidation' || steps.metrics.conclusion == 'Failure' && 'metrics' || steps.start-metrics.conclusion == 'Failure' && 'start-metrics' || ''}}" \
            --commitMessage "${{ github.event.head_commit.message }}" \
            --url "https://github.com/${{ github.repository_owner }}/${{ env.repository }}/actions/runs/${{ github.run_id }}" \
            --secrets-ci '${{ env.secrets }}';
        fi;

        if [ '${{ env.skipAWS }}' == '' ]; then
          echo "Skipping final metric because one of the following inputs has not been provided: aws-access-key-id, aws-secret-access-key, aws-cloudfront-distribution-id, aws-s3-bucket-name"
        else 
          npx -y jjo \
            timestamp=$(date -u +"%FT%TZ" | tr -d '\n') \
            type=snap-action \
            data=$(npx -y jjo \
              conclusion=${{ github.action_status }} \
              duration=$duration \
              repository=${{ env.repository }} \
              repositoryOwner=${{ github.repository_owner }} \
              branch=${{ env.branch }} \
              baseRef=${{ github.base_ref }} \
              actor=${{ github.actor }} \
              eventName=${{ github.event_name }} \
              job=${{ github.job }} \
              sha_before=${{ github.event.before }} \
              sha_after=${{ github.event.after }} \
              sha_pr_head=${{ github.event.pull_request.head.sha }} \
              sha=${{ github.event.pull_request.base.sha }} \
              pullRequestID=${{ github.event.pull_request.number }} \
              url='https://github.com/${{ github.repository_owner }}/${{ env.repository }}/actions/runs/${{ github.run_id }}' \
              runAttempt=${{ github.run_attempt }} \
              failedStep='${{ steps.checkout-repo.conclusion == 'Failure' && 'checkout-repo' || steps.configure-aws.conclusion == 'Failure' && 'configure-aws' || steps.variables.conclusion == 'Failure' && 'variables' || steps.authenticate.conclusion == 'Failure' && 'authenticate' || steps.setup-node.conclusion == 'Failure' && 'setup-node' || steps.cache.conclusion == 'Failure' && 'cache' || steps.install.conclusion == 'Failure' && 'install' || steps.build.conclusion == 'Failure' && 'build' || steps.test.conclusion == 'Failure' && 'test' || steps.snapfu-recs-sync.conclusion == 'Failure' && 'snapfu-recs-sync' || steps.lighthouse.conclusion == 'Failure' && 'lighthouse' || steps.tag.conclusion == 'Failure' && 'tag' || steps.pr-comment.conclusion == 'Failure' && 'pr-comment' || steps.s3-upload.conclusion == 'Failure' && 's3-upload' || steps.lighthouse-metrics.conclusion == 'Failure' && 'lighthouse-metrics' || steps.invalidation.conclusion == 'Failure' && 'invalidation' || steps.metrics.conclusion == 'Failure' && 'metrics' || steps.start-metrics.conclusion == 'Failure' && 'start-metrics' || ''}}' \
            ) \
          > SnapAction-${{ env.repository }}-${{ github.event_name }}-$(date -u +"%Y_%m_%d_%H%M").json && \
          cat ./SnapAction*.json && \
          aws s3 cp --region us-east-1 ./SnapAction*.json s3://datawarehouse-stage/team-metrics-import/
        fi;
      id: metrics
      shell: bash
      if: always()

