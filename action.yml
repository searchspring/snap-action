name: 'Snap Publish'
description: 'Publish a Snap integration to AWS S3'

inputs:
  repository:
    description: 'Repository of Snap implementation to publish'
    required: true
  branch:
    description: 'Repository branch (ref) to run action in (used for testing)'
    required: false
  secretKey:
    description: 'Searchspring account secretKey. Can be obtained in the Searchspring Management Console. Required if package.json siteId is string format'
    required: false
  skipTests:
    description: 'Skip running e2e tests'
    required: false
    default: false
  skipLighthouse:
    description: 'Skip running lighthouse tests'
    required: false
    default: false
  skipPublish:
    description: 'Skip publishing to cdn'
    required: false
    default: false
  NODE_AUTH_TOKEN:
    description: 'Node auth token'
    required: false
  aws-access-key-id:
    description: 'AWS access Key'
    required: false
  aws-secret-access-key:
    description: 'AWS secret Key'
    required: false
  aws-cloudfront-distribution-id:
    description: 'AWS cloudfront distribution id'
    required: false
  aws-s3-bucket-name:
    description: 'AWS S3 bucket name'
    required: false
  aws-region:
    description: 'AWS region'
    required: false
    default: us-east-2  
  LHCI_GITHUB_APP_TOKEN:
    description: 'Lighthouse App Key for PR status updates'
    required: false
  GITHUB_BOT_TOKEN:
    description: 'Github user PAT token for posting lighthouse results in pull request comments and pushing tags'
    required: false
  secrets:
    description: 'Secrets encoded via toJSON. Expected if project has multiple siteIds in package.json. Expects repository secret for each key (ie. `WEBSITE_SECRET_KEY_${siteId}`)'
    required: false
  skipInvalidation:
    description: 'Skip Cloudfront invalidation'
    required: false
    default: false
  testing:
    description: 'Used for development testing purposes only!'
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      id: checkout-repo
      uses: actions/checkout@v2
      with:
        token: ${{ inputs.GITHUB_BOT_TOKEN || github.token }}
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.branch }}
        path: repository
        fetch-depth: 0

    - name: Setup Node
      id: setup-node
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Extract Variables
      id: variables
      shell: bash
      working-directory: repository
      run: |
        node ../scripts/utils/logStep.js --step 'Extract Variables'
        echo "Action trigger: ${{ github.event_name }}";

        if [ "${{ inputs.branch }}" != "" ]; then
          branch=`echo "${{ inputs.branch }}"`;
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          branch=`echo "${{ github.head_ref }}"`;
        else
          branch=`echo ${GITHUB_REF#refs/heads/}`;
        fi;
        echo "::set-output name=branch::$branch";
        echo "Using branch: $branch";

        # validate branch name here
        if [[ $branch =~ ^[0-9]+\.[0-9]+\.[0-9]+-?[0-9]*$ ]]; then
          echo "Branch name is reserved. Please do not use sem versioning for branch name.";
          exit 1;
        fi;

        secrets=`echo '${{ inputs.secrets }}' | jq -c .`;
        echo "::set-output name=secrets::$secrets";
        echo "Using secrets: $secrets";

        siteId_Type=`jq -r '.searchspring.siteId | type' < package.json`;
        echo "::set-output name=siteId_Type::$siteId_Type";

        packageJSONVersion=`jq -r '.searchspring.version' < package.json`;
        echo "::set-output name=packageJSONVersion::$packageJSONVersion";

        if [ $siteId_Type = 'string' ]; then \
          echo "siteId is a string"; \
          siteId=`jq -r '.searchspring.siteId' < package.json`; \
          echo "::set-output name=siteId::$siteId"; \
          echo "Using siteId: $siteId"; \
        elif [ $siteId_Type = 'object' ]; then \
          echo "siteId is an object"; \
          siteIds=`jq -r '.searchspring.siteId | keys_unsorted | join(",")' < package.json`; \
          echo "::set-output name=siteIds::$siteIds"; \
          echo "Using siteIds: $siteIds"; \

          siteNames=`jq -r '[.searchspring.siteId[].name] | join(",")' < package.json`; \
          echo "::set-output name=siteNames::$siteNames"; \
          echo "Using siteNames: $siteNames"; \

          # also set siteId to the first siteId in object format
          siteId=`jq -r '.searchspring.siteId | keys_unsorted | first' < package.json`; \
          echo "::set-output name=siteId::$siteId"; \
          echo "Using siteId: $siteId"; \

        else \
          echo "Cannot determine project siteId from package.json"; \
          exit 1; \
        fi;

        pullRequestID=${{ github.event.pull_request.number }}
        echo "::set-output name=pullRequestID::$pullRequestID"
        echo "Using pullRequestID: $pullRequestID"
        repository=`git config --get remote.origin.url | grep -Eo "[^\/]+$" | sed 's/.git//g'`
        echo "::set-output name=repository::$repository"
        echo "Using repository: $repository"
        startTime=`date -u +%s`
        echo "::set-output name=startTime::$startTime"
        echo "Using startTime: $startTime"

        awsCreds='${{ inputs.aws-access-key-id && inputs.aws-secret-access-key && inputs.aws-cloudfront-distribution-id && inputs.aws-s3-bucket-name }}'
        echo "::set-output name=awsCreds::$awsCreds";
        echo "Using awsCreds: $awsCreds"

        isSelfHosted=${{ (startsWith(github.head_ref, 'updater/patch/') || startsWith(github.ref_name, 'updater/patch/') || startsWith(github.head_ref, 'updater/revert/') || startsWith(github.ref_name, 'updater/revert/') || (github.ref_name == github.event.repository.master_branch && (contains(github.event.head_commit.message,'from searchspring-implementations/updater/patch/') || contains(github.event.head_commit.message,'from searchspring-implementations/updater/revert/')))) && 'true' || 'false' }}
        echo "::set-output name=isSelfHosted::$isSelfHosted";
        echo "Using isSelfHosted: $isSelfHosted"

    - name: Configure AWS credentials
      id: configure-aws
      if: ${{ steps.variables.outputs.awsCreds }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Updater Start Metrics
      id: start-metrics
      if: ${{ steps.variables.outputs.isSelfHosted == 'true' }}
      shell: bash
      env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        # Start time metric used in snapp-updater action status, Should only run on self-hosted
        node scripts/metrics/updater.js \
          --runAttempt "${{ github.run_attempt }}" \
          --actor "${{ github.actor }}" \
          --repository "${{ steps.variables.outputs.repository }}" \
          --branch "${{ steps.variables.outputs.branch }}" \
          --eventName "${{ github.event_name }}" \
          --pullRequestID "${{ github.event.pull_request.number }}" \
          --startTime "${{ steps.variables.outputs.startTime }}" \
          --conclusion "" \
          --duration "" \
          --failedStep "" \
          --commitMessage "$COMMIT_MESSAGE" \
          --url "https://github.com/${{ github.repository_owner }}/${{ steps.variables.outputs.repository }}/actions/runs/${{ github.run_id }}" \
          --secrets-ci '${{ steps.variables.outputs.secrets }}';

    - name: Cache node_modules
      id: cache
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Authenticate siteId and secretKey
      id: authenticate
      shell: bash
      run: |
        node scripts/utils/logStep.js --step 'Authenticate siteId and secretKey'
        node scripts/smc/verify.js \
          --siteId_Type "${{ steps.variables.outputs.siteId_Type }}" \
          --siteId "${{ steps.variables.outputs.siteId }}" \
          --repository "${{ steps.variables.outputs.repository }}" \
          --secretKey "${{ inputs.secretKey }}" \
          --siteIds "${{ steps.variables.outputs.siteIds }}" \
          --siteNames "${{ steps.variables.outputs.siteNames }}" \
          --secrets-ci '${{ steps.variables.outputs.secrets }}';

    - name: Install Packages
      id: install
      shell: bash
      working-directory: repository
      env:
        NODE_AUTH_TOKEN: ${{ inputs.NODE_AUTH_TOKEN }}
      run: |
        node ../scripts/utils/logStep.js --step 'Install Packages'
        if [ -f "package-lock.json" ]; then
          npm ci --prefer-offline
        else
          npm install --prefer-offline
        fi

    - name: Build Bundle
      id: build
      shell: bash
      working-directory: repository
      run: |
        node ../scripts/utils/logStep.js --step 'Build Bundle'
        npm run build
        if [ ! -f "dist/bundle.js" ]; then \
          echo "Expected dist directory to contain bundle.js and universal.bundle.js"; \
          echo "Missing dist/bundle.js"; \
          exit 1; \
        elif [ ! -f "dist/universal.bundle.js" ]; then \
          echo "Expected dist directory to contain bundle.js and universal.bundle.js"; \
          echo "Missing dist/universal.bundle.js"; \
          exit 1; \
        fi;

    - name: Run Tests
      id: test
      if: github.event_name == 'push' && github.ref_name != 'production'
      shell: bash
      working-directory: repository
      run: |
        node ../scripts/utils/logStep.js --step 'Run Tests'
        if [ ${{ inputs.skipTests }} = true ]; then
          echo 'skipping tests due to skipTests flag'; 
        else
          echo -e 'pcm.!default {\n type hw\n card 0\n}\n\nctl.!default {\n type hw\n card 0\n}' > ~/.asoundrc;
          npm run test;
        fi;
    
    - name: Snapfu Recs Sync
      id: snapfu-recs-sync
      shell: bash
      if: steps.variables.outputs.branch == 'production' && steps.variables.outputs.isSelfHosted == 'false'
      working-directory: repository
      run: |
        node ../scripts/utils/logStep.js --step 'Snapfu Recs Sync'
          npm install -g snapfu
          snapfu recs sync \
            --secret-key "${{ inputs.secretKey }}" \
            --secrets-ci '${{ steps.variables.outputs.secrets }}';
    
    - name: Lighthouse Tests
      id: lighthouse
      if: github.event_name == 'pull_request'
      shell: bash
      working-directory: repository
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ inputs.LHCI_GITHUB_APP_TOKEN }}
      run: |
        node ../scripts/utils/logStep.js --step 'Lighthouse Tests'
        if [ ${{ inputs.skipLighthouse }} = true ]; then \
          echo 'skipping lighthouse tests'; \
        elif [ -f "tests/lighthouse/lighthouserc.js" ]; then \
          npm run lighthouse -- --throttling.cpuSlowdownMultiplier=2.2 && \
          echo "::set-output name=scores::$(cat tests/lighthouse/runs/manifest.json | jq -c '.[] | select( .isRepresentativeRun | select('true') ) | .summary' | jq -r 'to_entries[] | "\(.key): \(.value | tonumber * 100 | floor )"' | tr '\n' ',' )" &&  \
          echo "::set-output name=report::$(cat tests/lighthouse/runs/manifest.json | jq -c '.[] | select( .isRepresentativeRun | select('true') ) | .htmlPath')" || exit 1; \
        else \
          echo 'lighthouserc.js file not found in repository, skipping lighthouse tests'; \
        fi
    
    - name: Git Tag
      id: tag
      if: ${{ contains(steps.variables.outputs.packageJSONVersion, '.') && steps.variables.outputs.branch == 'production' }}
      shell: bash
      working-directory: repository
      env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        node ../scripts/utils/logStep.js --step 'Git Tag'
        git config user.name searchspring-machine
        git config user.email machine@searchspring.com

        if [ $(git tag -l "${{ steps.variables.outputs.packageJSONVersion }}") ]; then
            # tag exist, use scripts/tag/increment.js to bump/add suffix version
            echo "Tag ${{ steps.variables.outputs.packageJSONVersion }} already exists."
            newTag=$(node ./../scripts/tag/increment.js --tags "$(git tag -l '${{ steps.variables.outputs.packageJSONVersion }}*')")
            if [ "${{ steps.variables.outputs.packageJSONVersion }}" != "$newTag" ]; then
              echo "Creating tag $newTag"
              git tag -a "$newTag" -m "tagged from snap-action"
              git push origin $newTag
              tag=`echo "$newTag"`;
              echo "::set-output name=tag::$tag";
            fi
        elif [ "${{ steps.variables.outputs.packageJSONVersion }}" != "" ]; then
            # tag doesn't exist, create it from the package.json searchspring.version
            git tag -a "${{ steps.variables.outputs.packageJSONVersion }}" -m "tagged from snap-action"
            git push origin ${{ steps.variables.outputs.packageJSONVersion }}
            tag=`echo "${{ steps.variables.outputs.packageJSONVersion }}"`;
            echo "::set-output name=tag::$tag";
        fi

        if [ "${{ contains(github.event.head_commit.message,'from searchspring-implementations/updater/revert/') }}" == "true" ]; then
          tagToDelete=$(node ./../scripts/tag/getTag.js --tags "$(git tag -l)" --commitMessage "$COMMIT_MESSAGE")
          git push --delete origin $tagToDelete
        fi


    - name: PR Comment
      id: pr-comment
      if: steps.lighthouse.outputs.scores && steps.variables.outputs.isSelfHosted == 'false'
      uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.GITHUB_BOT_TOKEN || github.token }}
        script: |
          if (!${{ inputs.testing }}) {
            github.rest.issues.createComment({
              issue_number: ${{ steps.variables.outputs.pullRequestID || 0 }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Lighthouse <a target='_blank' rel='noopener' href='https://snapui.searchspring.io/${{ steps.variables.outputs.siteId }}/.lighthouse/${{ steps.variables.outputs.branch }}/" + ${{ steps.lighthouse.outputs.report || '""' }}.split('/').pop() + "'>Results</a>\n\n${{ steps.lighthouse.outputs.scores }}".split(',').join('\n')
            });
          } else {
            console.log('skipping PR Comment due to testing')
          }
          
    - name: Lighthouse Metrics
      id: lighthouse-metrics
      if: ${{ steps.variables.outputs.awsCreds }}
      shell: bash
      run: |
        node scripts/utils/logStep.js --step 'Lighthouse Metrics'
        if [ ${{ inputs.skipLighthouse }} = false ]; then \
          if [ "${{ github.event_name }}" = "pull_request" ]; then \
            node scripts/metrics/lighthouse.js \
              --siteId "${{ steps.variables.outputs.siteId }}" \
              --branch "${{ steps.variables.outputs.branch }}" \
              --repositoryOwner "${{ github.repository_owner }}" \
              --repository "${{ steps.variables.outputs.repository }}" \
              --issueNumber "${{ steps.variables.outputs.pullRequestID }}";
          else \
            echo "Skipping lighthouse metrics generation due to non pull_request event"; \
          fi;
        else \
          echo "skipping lighthouse metrics generation due to skipLighthouse flag"; \
        fi;
        if [ -f metrics/SnapAction*.json ]; then \
          aws s3 cp --region us-east-1 ./metrics/SnapAction*.json s3://datawarehouse-stage/team-metrics-import/; \
        fi;
        
    - name: Copy Files to S3
      id: s3-upload
      if: ${{ steps.variables.outputs.awsCreds }}
      shell: bash
      working-directory: repository
      run: |
        node ../scripts/utils/logStep.js --step 'Copy Files to S3'
        if [ ${{ inputs.skipPublish }} = true ]; then
          echo "skipping upload of 'dist' and 'public' directories to S3 due to skipPublish flag";
        elif [ "${{ github.event_name }}" = "pull_request" ]; then \
          echo "skipping upload of 'dist' and 'public' directories to S3 for pull_request action triggers"; \
          if [ -f tests/lighthouse/runs/manifest.json ]; then aws s3 sync --cache-control max-age=1800 --acl public-read tests/lighthouse/runs s3://${{ inputs.aws-s3-bucket-name }}/${{ steps.variables.outputs.siteId }}/.lighthouse/${{ steps.variables.outputs.branch }}; fi; \
        else \
          if [ '${{ steps.variables.outputs.siteId_Type }}' = 'string' ]; then \
            aws s3 sync --cache-control max-age=1800 --acl public-read dist s3://${{ inputs.aws-s3-bucket-name }}/${{ steps.variables.outputs.siteId }}/${{ steps.variables.outputs.branch }}
            aws s3 sync --cache-control max-age=1800 --acl public-read public s3://${{ inputs.aws-s3-bucket-name }}/${{ steps.variables.outputs.siteId }}/${{ steps.variables.outputs.branch }}
            if [ "${{ steps.tag.outputs.tag }}" != "" ]; then
              aws s3 sync --cache-control max-age=1800 --acl public-read dist s3://${{ inputs.aws-s3-bucket-name }}/${{ steps.variables.outputs.siteId }}/${{ steps.tag.outputs.tag }}
              aws s3 sync --cache-control max-age=1800 --acl public-read public s3://${{ inputs.aws-s3-bucket-name }}/${{ steps.variables.outputs.siteId }}/${{ steps.tag.outputs.tag }}
            fi
          elif [ '${{ steps.variables.outputs.siteId_Type }}' = 'object' ]; then
            echo "${{ steps.variables.outputs.siteIds }}" | tr , '\n' | while read siteId
              do
                echo "Copying files to S3 for siteId $siteId"
                aws s3 sync --cache-control max-age=1800 --acl public-read dist s3://${{ inputs.aws-s3-bucket-name }}/$siteId/${{ steps.variables.outputs.branch }}
                aws s3 sync --cache-control max-age=1800 --acl public-read public s3://${{ inputs.aws-s3-bucket-name }}/$siteId/${{ steps.variables.outputs.branch }}
                if [ "${{ steps.tag.outputs.tag }}" != "" ]; then
                  aws s3 sync --cache-control max-age=1800 --acl public-read dist s3://${{ inputs.aws-s3-bucket-name }}/$siteId/${{ steps.tag.outputs.tag }}
                  aws s3 sync --cache-control max-age=1800 --acl public-read public s3://${{ inputs.aws-s3-bucket-name }}/$siteId/${{ steps.tag.outputs.tag }}
                fi
              done;
          fi;
        fi;

    - name: Invalidate Files
      id: invalidation
      if: ${{ steps.variables.outputs.awsCreds }}
      shell: bash
      working-directory: repository
      env:
        AWS_MAX_ATTEMPTS: 9
      run: |
        node ../scripts/utils/logStep.js --step 'Invalidate Files'
        if [ ${{ inputs.skipInvalidation }} = true ]; then
          echo "skipping invalidation due to skipInvalidation flag";
        elif [ ${{ inputs.skipPublish }} = true ]; then
          echo "skipping invalidation due to skipPublish flag";
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "skipping invalidation for pull_request action triggers";
        else
          if [ ${{ steps.variables.outputs.branch }} = production ]; then
            if [ "${{ steps.variables.outputs.isSelfHosted }}" = "true" ]; then
              echo "Only invalidating bundle.js due to self-hosted"
              if [ '${{ steps.variables.outputs.siteId_Type }}' = 'string' ]; then
                aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/${{ steps.variables.outputs.siteId }}/bundle.js"
              elif [ '${{ steps.variables.outputs.siteId_Type }}' = 'object' ]; then
                echo "${{ steps.variables.outputs.siteIds }}" | tr , '\n' | while read siteId
                  do
                    echo "Invalidating files for siteId $siteId"
                    aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/$siteId/bundle.js"
                  done
              fi
            elif [ '${{ steps.variables.outputs.siteId_Type }}' = 'string' ]; then
              aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/${{ steps.variables.outputs.siteId }}/*"
            elif [ '${{ steps.variables.outputs.siteId_Type }}' = 'object' ]; then
              echo "${{ steps.variables.outputs.siteIds }}" | tr , '\n' | while read siteId
                do
                  echo "Invalidating files for siteId $siteId"
                  aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/$siteId/*"
                  sleep 3
                done
            fi
          else
            if [ "${{ steps.variables.outputs.isSelfHosted }}" = "true" ]; then
              echo "Skipping invalidation for branch due to self-hosted"
            elif [ '${{ steps.variables.outputs.siteId_Type }}' = 'string' ]; then
              aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/${{ steps.variables.outputs.siteId }}/${{ steps.variables.outputs.branch }}/*"
            elif [ '${{ steps.variables.outputs.siteId_Type }}' = 'object' ]; then
              echo "${{ steps.variables.outputs.siteIds }}" | tr , '\n' | while read siteId
                do
                  echo "Invalidating files for siteId $siteId on branch ${{ steps.variables.outputs.branch }}"
                  aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/$siteId/${{ steps.variables.outputs.branch }}/*"
                  sleep 3
                done
            fi
          fi
        fi;
    
    - name: Commit package-lock.json
      id: commit-package-lock
      shell: bash
      if: steps.variables.outputs.isSelfHosted == 'true' && github.event_name == 'push'
      working-directory: repository
      run: |
        node ../scripts/utils/logStep.js --step 'Commit package-lock.json'
        git diff-index --quiet HEAD || git remote remove origin && \
        git remote add origin https://${{ github.token }}@github.com/searchspring-implementations/${{ steps.variables.outputs.repository }} && \
        git add package-lock.json && \
        git commit -m "commit package-lock.json from action" && \
        git push -u origin ${{ steps.variables.outputs.branch }}
      
    - name: Conclusion Metrics
      id: metricss
      shell: bash
      if: always()
      env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        node scripts/utils/logSummary.js --steps '${{ toJSON(steps) }}'
        duration="$(($(date -u +%s)-${{ steps.variables.outputs.startTime }}))"

        if [ '${{ steps.variables.outputs.awsCreds }}' == '' ]; then
          echo "Skipping final metric because one of the following inputs has not been provided: aws-access-key-id, aws-secret-access-key, aws-cloudfront-distribution-id, aws-s3-bucket-name"
        else 
          patchId=$(node scripts/utils/patchId.js --branch "${{ steps.variables.outputs.branch }}" --commitMessage "$COMMIT_MESSAGE")
          npx -y jjo \
            timestamp=$(date -u +"%FT%TZ" | tr -d '\n') \
            type=snap-action \
            data=$(npx -y jjo \
              conclusion=${{ github.action_status }} \
              duration=$duration \
              repository=${{ steps.variables.outputs.repository }} \
              repositoryOwner=${{ github.repository_owner }} \
              branch=${{ steps.variables.outputs.branch }} \
              baseRef=${{ github.base_ref }} \
              actor=${{ github.actor }} \
              eventName=${{ github.event_name }} \
              job=${{ github.job }} \
              sha_before=${{ github.event.before }} \
              sha_after=${{ github.event.after }} \
              sha_pr_head=${{ github.event.pull_request.head.sha }} \
              sha=${{ github.event.pull_request.base.sha }} \
              pullRequestID=${{ github.event.pull_request.number }} \
              patchId=$patchId \
              url='https://github.com/${{ github.repository_owner }}/${{ steps.variables.outputs.repository }}/actions/runs/${{ github.run_id }}' \
              runAttempt=${{ github.run_attempt }} \
              failedStep='${{ steps.checkout-repo.conclusion == 'Failure' && 'checkout-repo' || steps.configure-aws.conclusion == 'Failure' && 'configure-aws' || steps.variables.conclusion == 'Failure' && 'variables' || steps.authenticate.conclusion == 'Failure' && 'authenticate' || steps.setup-node.conclusion == 'Failure' && 'setup-node' || steps.cache.conclusion == 'Failure' && 'cache' || steps.install.conclusion == 'Failure' && 'install' || steps.build.conclusion == 'Failure' && 'build' || steps.test.conclusion == 'Failure' && 'test' || steps.snapfu-recs-sync.conclusion == 'Failure' && 'snapfu-recs-sync' || steps.lighthouse.conclusion == 'Failure' && 'lighthouse' || steps.tag.conclusion == 'Failure' && 'tag' || steps.pr-comment.conclusion == 'Failure' && 'pr-comment' || steps.s3-upload.conclusion == 'Failure' && 's3-upload' || steps.lighthouse-metrics.conclusion == 'Failure' && 'lighthouse-metrics' || steps.invalidation.conclusion == 'Failure' && 'invalidation' || steps.metrics.conclusion == 'Failure' && 'metrics' || steps.start-metrics.conclusion == 'Failure' && 'start-metrics' || steps.commit-package-lock.conclusion == 'Failure' && 'commit-package-lock' || ''}}' \
            ) \
            | tee ${{ steps.variables.outputs.repository }}-conclusion-${{ github.event_name }}-${{ steps.variables.outputs.packageJSONVersion }}.json SnapAction-${{ steps.variables.outputs.repository }}-${{ github.event_name }}-$(date -u +"%Y_%m_%d_%H%M").json && \
          cat ./SnapAction*.json && \
          aws s3 cp --region us-east-1 ./SnapAction*.json s3://datawarehouse-stage/team-metrics-import/
        fi;

        if [ '${{ steps.variables.outputs.isSelfHosted }}' == 'true' ]; then
          # upload metric to s3 to be used in snapp-updater
          aws s3 cp --acl public-read ./${{ steps.variables.outputs.repository }}-conclusion-${{ github.event_name }}-${{ steps.variables.outputs.packageJSONVersion }}.json s3://${{ inputs.aws-s3-bucket-name }}/${{ steps.variables.outputs.siteId }}/${{ steps.variables.outputs.branch }}/

          # Conclusion metric used in snapp-updater action status, Should only run on self-hosted
          node scripts/metrics/updater.js \
            --runAttempt "${{ github.run_attempt }}" \
            --actor "${{ github.actor }}" \
            --repository "${{ steps.variables.outputs.repository }}" \
            --branch "${{ steps.variables.outputs.branch }}" \
            --eventName "${{ github.event_name }}" \
            --pullRequestID "${{ github.event.pull_request.number }}" \
            --startTime "" \
            --conclusion "${{ github.action_status }}" \
            --duration "$duration" \
            --failedStep "${{ steps.checkout-repo.conclusion == 'Failure' && 'checkout-repo' || steps.configure-aws.conclusion == 'Failure' && 'configure-aws' || steps.variables.conclusion == 'Failure' && 'variables' || steps.authenticate.conclusion == 'Failure' && 'authenticate' || steps.setup-node.conclusion == 'Failure' && 'setup-node' || steps.cache.conclusion == 'Failure' && 'cache' || steps.install.conclusion == 'Failure' && 'install' || steps.build.conclusion == 'Failure' && 'build' || steps.test.conclusion == 'Failure' && 'test' || steps.snapfu-recs-sync.conclusion == 'Failure' && 'snapfu-recs-sync' || steps.lighthouse.conclusion == 'Failure' && 'lighthouse' || steps.tag.conclusion == 'Failure' && 'tag' || steps.pr-comment.conclusion == 'Failure' && 'pr-comment' || steps.s3-upload.conclusion == 'Failure' && 's3-upload' || steps.lighthouse-metrics.conclusion == 'Failure' && 'lighthouse-metrics' || steps.invalidation.conclusion == 'Failure' && 'invalidation' || steps.metrics.conclusion == 'Failure' && 'metrics' || steps.start-metrics.conclusion == 'Failure' && 'start-metrics' || steps.commit-package-lock.conclusion == 'Failure' && 'commit-package-lock' || ''}}" \
            --commitMessage "$COMMIT_MESSAGE" \
            --url "https://github.com/${{ github.repository_owner }}/${{ steps.variables.outputs.repository }}/actions/runs/${{ github.run_id }}" \
            --secrets-ci '${{ steps.variables.outputs.secrets }}';
        fi;
        
